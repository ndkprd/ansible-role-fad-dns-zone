---

- name: Print out the DNS Zone TXT Record existing values.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_dns_zone_txt_record_api_endpoint
      % ((dns_zone.0.name), dns_zone.1.id), validate_certs=false, split_lines=false,
      headers=fad_api_header) | from_json).get('payload') }}
  loop: "{{ fad_dns_zones | subelements('txt_records') }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.1.name + '.' + dns_zone.0.domain_name + ' -> ' + dns_zone.1.text }}"
  tags: [debug]

- name: Create new DNS Zone TXT Record entry if it's not found.
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_dns_zone_txt_record_api_endpoint | format((dns_zone.0.name), dns_zone.1.id) }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ dns_zone.1.id | string }}",
        "name": "{{ dns_zone.1.name | string }}",
        "text": "{{ dns_zone.1.text | string }}",
        "ttl": "{{ dns_zone.1.ttl | default('-1') | string }}"
      }
  register: fad_dns_zone_txt_record_post_results
  loop: "{{ fad_dns_zones | subelements('txt_records') }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.1.name + '.' + dns_zone.0.domain_name + ' -> ' + dns_zone.1.text }}"
  when:
    - (lookup('url', fad_dns_zone_txt_record_api_endpoint
      % ((dns_zone.0.name), dns_zone.1.id),validate_certs=false,
      split_lines=false, headers=fad_api_header) | from_json).get('payload').mkey is undefined
  changed_when: "fad_dns_zone_txt_record_post_results.json.payload == 0"
  failed_when: "fad_dns_zone_txt_record_post_results.json.payload not in [0, -15]"

- name: Update DNS Zone TXT Record entry if it's exist and any of its value is changed.
  ansible.builtin.uri:
    method: PUT
    url: "{{ fad_dns_zone_txt_record_api_endpoint | format((dns_zone.0.name), dns_zone.1.id) }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ dns_zone.1.id | string }}",
        "name": "{{ dns_zone.1.name | string }}",
        "text": "{{ dns_zone.1.text | string }}",
        "ttl": "{{ dns_zone.1.ttl | default('-1') | string }}"
      }
  register: fad_dns_zone_txt_record_put_results
  loop: "{{ fad_dns_zones | subelements('txt_records') }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.1.name + '.' + dns_zone.0.domain_name + ' -> ' + dns_zone.1.text }}"
  when:
    - (lookup('url', fad_dns_zone_txt_record_api_endpoint
      % ((dns_zone.0.name), dns_zone.1.id),validate_certs=false,
      split_lines=false, headers=fad_api_header) | from_json).get('payload').mkey is defined
    - (lookup('url', fad_dns_zone_txt_record_api_endpoint
      % ((dns_zone.0.name), dns_zone.1.id),validate_certs=false,
      split_lines=false, headers=fad_api_header) | from_json).get('payload').name != dns_zone.1.name or
      (lookup('url', fad_dns_zone_txt_record_api_endpoint
      % ((dns_zone.0.name), dns_zone.1.id),validate_certs=false,
      split_lines=false, headers=fad_api_header) | from_json).get('payload').text != dns_zone.1.text or
      (lookup('url', fad_dns_zone_txt_record_api_endpoint
      % ((dns_zone.0.name), dns_zone.1.id),validate_certs=false,
      split_lines=false, headers=fad_api_header) | from_json).get('payload').ttl != dns_zone.1.ttl | default('-1') | string
  changed_when: "fad_dns_zone_txt_record_put_results.json.payload == 0"
  failed_when: "fad_dns_zone_txt_record_put_results.json.payload not in [0, -15]"

- name: Print out the DNS Zone TXT Record values after create/update task.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_dns_zone_txt_record_api_endpoint
      % ((dns_zone.0.name), dns_zone.1.id), validate_certs=false, split_lines=false,
      headers=fad_api_header) | from_json).get('payload') }}
  loop: "{{ fad_dns_zones | subelements('txt_records') }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.1.name + '.' + dns_zone.0.domain_name + ' -> ' + dns_zone.1.text }}"
  tags: [debug]
