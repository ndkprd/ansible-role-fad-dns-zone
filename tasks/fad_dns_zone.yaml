---

- name: Print out the DNS Zone existing values.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_dns_zone_api_endpoint
      % (dns_zone.name), validate_certs=false, split_lines=false, headers=fad_api_header) | from_json).get('payload') }}
  loop: "{{ fad_dns_zones }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.name }}"
  tags: [debug]

- name: Create DNS Zone entry if it's exist and any of its value is changed.
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_dns_zone_api_endpoint | format(dns_zone.name) }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ dns_zone.name }}",
        "domain_name": "{{ dns_zone.domain_name }}",
        "type": "{{ dns_zone.type }}",
        "dns_policy": "{{ dns_zone.dns_policy }}",
        "ttl": "{{ dns_zone.ttl | default('3600') }}",
        "negative_ttl": "{{ dns_zone.negative_ttl | default('3600') }}",
        "primary_server_ip": "{{ dns_zone.primary_ns_ipv4 }}",
        "primary_server_ip6": "{{ dns_zone.primary_ns_ipv6 }}",
        "primary_server_name": "{{ dns_zone.primary_ns_name | default('ns') }}",
        "responible_mail": "{{ dns_zone.responsible_mail | default('admin') }}",
        "allow_transfer": "{{ dns_zone.allow_transfer | default('') }}",
        "serial": "{{ '%Y%m%d%H' | strftime }}"
      }
  register: fad_dns_zone_put_results
  loop: "{{ fad_dns_zones }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.name }}"
  when:
    - (lookup('url', fad_dns_zone_api_endpoint
      % (dns_zone.name), validate_certs=false, split_lines=false,
      headers=fad_api_header) | from_json).get('payload').mkey is undefined
  changed_when: "fad_dns_zone_put_results.json.payload == 0"
  failed_when: "fad_dns_zone_put_results.json.payload != 0 and fad_dns_zone_put_results.json.payload != -15"

- name: Update DNS Zone entry if it's exist and any of its value is changed.
  ansible.builtin.uri:
    method: PUT
    url: "{{ fad_dns_zone_api_endpoint | format(dns_zone.name) }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "domain_name": "{{ dns_zone.domain_name }}",
        "dns_policy": "{{ dns_zone.dns_policy }}",
        "ttl": "{{ dns_zone.ttl | default('3600') }}",
        "type": "{{ dns_zone.type }}",
        "negative_ttl": "{{ dns_zone.negative_ttl | default('3600') }}",
        "primary_server_ip": "{{ dns_zone.primary_ns_ipv4 }}",
        "primary_server_ip6": "{{ dns_zone.primary_ns_ipv6 }}",
        "primary_server_name": "{{ dns_zone.primary_ns_name | default('ns') }}",
        "responible_mail": "{{ dns_zone.responsible_mail | default('admin') }}",
        "allow_transfer": "{{ dns_zone.allow_transfer | default('') }}",
        "serial": "{{ '%Y%m%d%H' | strftime }}"
      }
  register: fad_dns_zone_put_results
  loop: "{{ fad_dns_zones }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.name }}"
  when: >
    ((lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').mkey is defined) and
    ((lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').ttl != dns_zone.ttl or
    (lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').negative_ttl != dns_zone.negative_ttl or
    (lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').primary_server_ip != dns_zone.primary_ns_ipv4 or
    (lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').primary_server_ip6 != dns_zone.primary_ns_ipv6 or
    (lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').primary_server_name != dns_zone.primary_ns_name or
    (lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').responible_mail != dns_zone.responsible_mail or 
    (lookup('url', fad_dns_zone_api_endpoint
    % (dns_zone.name), validate_certs=false, split_lines=false,
    headers=fad_api_header) | from_json).get('payload').allow_transfer != dns_zone.allow_transfer)
  changed_when: "fad_dns_zone_put_results.json.payload == 0"
  failed_when: "fad_dns_zone_put_results.json.payload != 0 and fad_dns_zone_put_results.json.payload != -15"

- name: Print out the DNS Zone values after create/update task.
  ansible.builtin.debug:
    msg: >
      {{ (lookup('url', fad_dns_zone_api_endpoint
      % (dns_zone.name), validate_certs=false, split_lines=false, headers=fad_api_header) | from_json).get('payload') }}
  loop: "{{ fad_dns_zones }}"
  loop_control:
    loop_var: dns_zone
    label: "{{ dns_zone.name }}"
  tags: [debug]
