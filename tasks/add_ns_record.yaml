---

- name: Set endpoints and variables for {{ dns_zone.name }}
  ansible.builtin.set_fact:
    fad_api_endpoint_dns_zone_ns_record: "https://{{ ansible_host }}/api/global_dns_server_zone_child_ns_record?vdom={{ fad_vdom }}&pkey=fqdn_generate_{{ dns_zone.name }}.&mkey={{ ns_record.id }}"
    fad_dns_zone_ns_record_name: "{{ ns_record.hostname }}.{{ dns_zone.name }}"
  tags:
    - fad_dns_zones

- name: Check if the NS Record is exist for domain {{ fad_dns_zone_ns_record_name }}
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint_dns_zone_ns_record }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: fad_dns_zone_ns_record_existing_data
  delegate_to: localhost
  tags:
    - fad_dns_zones

- name: Print out the existing NS Record value for domain {{ fad_dns_zone_ns_record_name }}
  ansible.builtin.debug:
    var:  fad_dns_zone_ns_record_existing_data.json.payload
  when: fad_dns_zone_ns_record_existing_data.json.payload is defined
  tags:
  - fad_dns_zones
  - debug

- name: Create new NS Record if it doesn't exist for domain {{ fad_dns_zone_ns_record_name }}
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_api_endpoint_dns_zone_ns_record }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ ns_record.id | string }}",
        "host_name": "{{ ns_record.hostname }}",
        "domain_name": "{{ ns_record.domain_name }}",
        "ip": "{{ ns_record.ipv4 | default('0.0.0.0') | string }}",
        "ip6": "{{ ns_record.ipv6| default('::') | string }}",
        "ttl": "{{ ns_record.ttl | default('-1') | string }}",
        "type": "{{ ns_record.ip_type | default('ipv4') | string }}"
      }
  register: fad_dns_zone_ns_record_post_result
  delegate_to: localhost
  when: fad_dns_zone_ns_record_existing_data.json.payload.mkey is undefined
  changed_when: fad_dns_zone_ns_record_post_result.json.payload == 0
  failed_when: (fad_dns_zone_ns_record_post_result.json.payload != 0) and (fad_dns_zone_ns_record_post_result.json.payload != -15)
  tags:
    - fad_dns_zones

- name: Update NS Record if it fails idempotent check {{ fad_dns_zone_ns_record_name }}
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_api_endpoint_dns_zone_ns_record }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: |
      {
        "mkey": "{{ ns_record.id | string }}",
        "host_name": "{{ ns_record.hostname }}",
        "domain_name": "{{ ns_record.domain_name }}",
        "ip": "{{ ns_record.ipv4 | default('0.0.0.0') | string }}",
        "ip6": "{{ ns_record.ipv6| default('::') | string }}",
        "ttl": "{{ ns_record.ttl | default('-1') | string }}",
        "type": "{{ ns_record.ip_type | default('ipv4') | string }}"
      }
  register: fad_dns_zone_ns_record_post_result
  delegate_to: localhost
  when: >
    (fad_dns_zone_ns_record_existing_data.json.payload.mkey is defined) and
    (fad_dns_zone_ns_record_existing_data.json.payload.host_name != ns_record.hostname or
    fad_dns_zone_ns_record_existing_data.json.payload.ip != ns_record.ipv4 or
    fad_dns_zone_ns_record_existing_data.json.payload.ip6 != ns_record.ipv6 or
    fad_dns_zone_ns_record_existing_data.json.payload.ttl != ns_record.ttl or
    fad_dns_zone_ns_record_existing_data.json.payload.type != ns_record.ip_type
    )
  changed_when: fad_dns_zone_ns_record_post_result.json.payload == 0
  failed_when: (fad_dns_zone_ns_record_post_result.json.payload != 0) and (fad_dns_zone_ns_record_post_result.json.payload != -15)
  tags:
    - fad_dns_zones

- name: Check if the NS Record data has changed for domain {{ fad_dns_zone_ns_record_name }}
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoint_dns_zone_ns_record }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: fad_dns_zone_ns_record_new_data
  delegate_to: localhost
  changed_when: fad_dns_zone_ns_record_new_data.json.payload != fad_dns_zone_ns_record_existing_data.json.payload
  tags:
    - fad_dns_zones
    - debug

- name: Print out the new NS Record value for domain {{ fad_dns_zone_ns_record_name }}
  ansible.builtin.debug:
    var:  fad_dns_zone_ns_record_new_data.json.payload
  tags:
  - fad_dns_zones
  - debug
